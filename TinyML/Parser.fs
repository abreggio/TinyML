// Implementation file for parser generated by fsyacc
module TinyML.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open TinyML
open TinyML.Parsing.LexYacc
open TinyML.Ast

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))


# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | FUN
  | ARROW
  | LET
  | REC
  | IN
  | TRUE
  | FALSE
  | BRA
  | KET
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | COLON
  | SEMICOLON
  | COMMA
  | STRING of (System.String)
  | ID of (System.String)
  | CHAR of (System.Char)
  | FLOAT of (System.Double)
  | INT of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FUN
    | TOKEN_ARROW
    | TOKEN_LET
    | TOKEN_REC
    | TOKEN_IN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_PERCENT
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_CHAR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_expr
    | NONTERM_expr_app_atom
    | NONTERM_expr_tuple_atom
    | NONTERM_expr_tuple_atoms
    | NONTERM_ty
    | NONTERM_ty_tuple

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IF  -> 1 
  | THEN  -> 2 
  | ELSE  -> 3 
  | FUN  -> 4 
  | ARROW  -> 5 
  | LET  -> 6 
  | REC  -> 7 
  | IN  -> 8 
  | TRUE  -> 9 
  | FALSE  -> 10 
  | BRA  -> 11 
  | KET  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | STAR  -> 15 
  | SLASH  -> 16 
  | PERCENT  -> 17 
  | LT  -> 18 
  | GT  -> 19 
  | LEQ  -> 20 
  | GEQ  -> 21 
  | EQ  -> 22 
  | NEQ  -> 23 
  | AND  -> 24 
  | OR  -> 25 
  | NOT  -> 26 
  | COLON  -> 27 
  | SEMICOLON  -> 28 
  | COMMA  -> 29 
  | STRING _ -> 30 
  | ID _ -> 31 
  | CHAR _ -> 32 
  | FLOAT _ -> 33 
  | INT _ -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_THEN 
  | 3 -> TOKEN_ELSE 
  | 4 -> TOKEN_FUN 
  | 5 -> TOKEN_ARROW 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_REC 
  | 8 -> TOKEN_IN 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_BRA 
  | 12 -> TOKEN_KET 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_STAR 
  | 16 -> TOKEN_SLASH 
  | 17 -> TOKEN_PERCENT 
  | 18 -> TOKEN_LT 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_LEQ 
  | 21 -> TOKEN_GEQ 
  | 22 -> TOKEN_EQ 
  | 23 -> TOKEN_NEQ 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_OR 
  | 26 -> TOKEN_NOT 
  | 27 -> TOKEN_COLON 
  | 28 -> TOKEN_SEMICOLON 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_STRING 
  | 31 -> TOKEN_ID 
  | 32 -> TOKEN_CHAR 
  | 33 -> TOKEN_FLOAT 
  | 34 -> TOKEN_INT 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr_app_atom 
    | 5 -> NONTERM_expr_app_atom 
    | 6 -> NONTERM_expr_app_atom 
    | 7 -> NONTERM_expr_app_atom 
    | 8 -> NONTERM_expr_app_atom 
    | 9 -> NONTERM_expr_app_atom 
    | 10 -> NONTERM_expr_app_atom 
    | 11 -> NONTERM_expr_app_atom 
    | 12 -> NONTERM_expr_tuple_atom 
    | 13 -> NONTERM_expr_tuple_atom 
    | 14 -> NONTERM_expr_tuple_atom 
    | 15 -> NONTERM_expr_tuple_atom 
    | 16 -> NONTERM_expr_tuple_atom 
    | 17 -> NONTERM_expr_tuple_atom 
    | 18 -> NONTERM_expr_tuple_atom 
    | 19 -> NONTERM_expr_tuple_atom 
    | 20 -> NONTERM_expr_tuple_atom 
    | 21 -> NONTERM_expr_tuple_atom 
    | 22 -> NONTERM_expr_tuple_atom 
    | 23 -> NONTERM_expr_tuple_atom 
    | 24 -> NONTERM_expr_tuple_atom 
    | 25 -> NONTERM_expr_tuple_atom 
    | 26 -> NONTERM_expr_tuple_atom 
    | 27 -> NONTERM_expr_tuple_atom 
    | 28 -> NONTERM_expr_tuple_atom 
    | 29 -> NONTERM_expr_tuple_atom 
    | 30 -> NONTERM_expr_tuple_atom 
    | 31 -> NONTERM_expr_tuple_atom 
    | 32 -> NONTERM_expr_tuple_atom 
    | 33 -> NONTERM_expr_tuple_atom 
    | 34 -> NONTERM_expr_tuple_atoms 
    | 35 -> NONTERM_expr_tuple_atoms 
    | 36 -> NONTERM_ty 
    | 37 -> NONTERM_ty 
    | 38 -> NONTERM_ty 
    | 39 -> NONTERM_ty 
    | 40 -> NONTERM_ty_tuple 
    | 41 -> NONTERM_ty_tuple 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FUN  -> "FUN" 
  | ARROW  -> "ARROW" 
  | LET  -> "LET" 
  | REC  -> "REC" 
  | IN  -> "IN" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | PERCENT  -> "PERCENT" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | CHAR _ -> "CHAR" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 11us; 65535us; 0us; 2us; 6us; 17us; 16us; 17us; 39us; 40us; 46us; 47us; 50us; 51us; 52us; 53us; 56us; 57us; 58us; 59us; 62us; 63us; 64us; 65us; 45us; 65535us; 0us; 19us; 4us; 36us; 5us; 36us; 6us; 19us; 16us; 19us; 20us; 36us; 21us; 36us; 22us; 36us; 23us; 36us; 24us; 36us; 25us; 36us; 26us; 36us; 27us; 36us; 28us; 36us; 29us; 36us; 30us; 36us; 31us; 36us; 32us; 36us; 33us; 36us; 34us; 36us; 35us; 36us; 39us; 19us; 46us; 19us; 50us; 19us; 52us; 19us; 56us; 19us; 58us; 19us; 62us; 19us; 64us; 19us; 66us; 19us; 67us; 19us; 68us; 19us; 69us; 19us; 70us; 19us; 71us; 19us; 72us; 19us; 73us; 19us; 74us; 19us; 75us; 19us; 76us; 19us; 77us; 19us; 78us; 19us; 79us; 19us; 80us; 19us; 81us; 19us; 27us; 65535us; 0us; 4us; 6us; 5us; 16us; 4us; 39us; 4us; 46us; 4us; 50us; 4us; 52us; 4us; 56us; 4us; 58us; 4us; 62us; 4us; 64us; 4us; 66us; 20us; 67us; 21us; 68us; 22us; 69us; 23us; 70us; 24us; 71us; 25us; 72us; 26us; 73us; 27us; 74us; 28us; 75us; 29us; 76us; 30us; 77us; 31us; 78us; 32us; 79us; 33us; 80us; 34us; 81us; 35us; 2us; 65535us; 6us; 7us; 81us; 82us; 5us; 65535us; 43us; 44us; 60us; 61us; 87us; 84us; 90us; 85us; 92us; 86us; 5us; 65535us; 43us; 88us; 60us; 88us; 87us; 88us; 90us; 88us; 92us; 89us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 15us; 61us; 89us; 92us; 98us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 15us; 2us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 17us; 2us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 2us; 3us; 11us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 15us; 13us; 19us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 28us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 29us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 30us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 31us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 32us; 33us; 15us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 33us; 16us; 13us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 1us; 13us; 2us; 14us; 15us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 4us; 15us; 37us; 40us; 41us; 1us; 15us; 1us; 15us; 1us; 15us; 3us; 16us; 17us; 18us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 17us; 18us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 4us; 18us; 37us; 40us; 41us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 35us; 1us; 35us; 1us; 36us; 4us; 37us; 37us; 40us; 41us; 4us; 37us; 39us; 40us; 41us; 3us; 37us; 40us; 41us; 1us; 37us; 1us; 38us; 2us; 38us; 41us; 1us; 39us; 1us; 39us; 1us; 41us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 24us; 42us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 87us; 103us; 119us; 135us; 151us; 167us; 183us; 199us; 215us; 231us; 247us; 263us; 279us; 295us; 311us; 328us; 330us; 333us; 335us; 337us; 339us; 341us; 343us; 345us; 350us; 352us; 354us; 356us; 360us; 362us; 364us; 366us; 368us; 370us; 373us; 376us; 378us; 380us; 382us; 384us; 386us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; 413us; 415us; 417us; 419us; 421us; 423us; 425us; 427us; 429us; 431us; 433us; 435us; 440us; 445us; 449us; 451us; 453us; 456us; 458us; 460us; |]
let _fsyacc_action_rows = 93
let _fsyacc_actionTableElements = [|12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 21us; 16386us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 18us; 75us; 19us; 76us; 20us; 77us; 21us; 78us; 22us; 73us; 23us; 74us; 24us; 79us; 25us; 80us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 22us; 16386us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 18us; 75us; 19us; 76us; 20us; 77us; 21us; 78us; 22us; 73us; 23us; 74us; 24us; 79us; 25us; 80us; 29us; 81us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 1us; 32768us; 12us; 8us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 1us; 32768us; 12us; 18us; 0us; 16395us; 0us; 16396us; 9us; 16403us; 9us; 13us; 10us; 14us; 11us; 16us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 9us; 16404us; 9us; 13us; 10us; 14us; 11us; 16us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 11us; 16405us; 9us; 13us; 10us; 14us; 11us; 16us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 11us; 16406us; 9us; 13us; 10us; 14us; 11us; 16us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 9us; 16407us; 9us; 13us; 10us; 14us; 11us; 16us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 9us; 16408us; 9us; 13us; 10us; 14us; 11us; 16us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 21us; 16409us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 18us; 75us; 19us; 76us; 20us; 77us; 21us; 78us; 22us; 73us; 23us; 74us; 24us; 79us; 25us; 80us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 13us; 16410us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 13us; 16411us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 13us; 16412us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 13us; 16413us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 13us; 16414us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 13us; 16415us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 19us; 16416us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 18us; 75us; 19us; 76us; 20us; 77us; 21us; 78us; 22us; 73us; 23us; 74us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 20us; 16417us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 18us; 75us; 19us; 76us; 20us; 77us; 21us; 78us; 22us; 73us; 23us; 74us; 24us; 79us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 22us; 16418us; 9us; 13us; 10us; 14us; 11us; 16us; 13us; 68us; 14us; 69us; 15us; 70us; 16us; 71us; 17us; 72us; 18us; 75us; 19us; 76us; 20us; 77us; 21us; 78us; 22us; 73us; 23us; 74us; 24us; 79us; 25us; 80us; 29us; 81us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16397us; 2us; 32768us; 11us; 41us; 31us; 38us; 1us; 32768us; 5us; 39us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16398us; 1us; 32768us; 31us; 42us; 1us; 32768us; 27us; 43us; 2us; 32768us; 11us; 90us; 31us; 83us; 3us; 16424us; 5us; 87us; 12us; 45us; 15us; 92us; 1us; 32768us; 5us; 46us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16399us; 2us; 32768us; 7us; 54us; 31us; 49us; 1us; 32768us; 22us; 50us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 1us; 32768us; 8us; 52us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16400us; 1us; 32768us; 31us; 55us; 2us; 32768us; 22us; 56us; 27us; 60us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 1us; 32768us; 8us; 58us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16401us; 2us; 32768us; 11us; 90us; 31us; 83us; 3us; 16424us; 5us; 87us; 15us; 92us; 22us; 62us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 1us; 32768us; 8us; 64us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 6us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16402us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 12us; 32768us; 4us; 37us; 6us; 48us; 9us; 13us; 10us; 14us; 11us; 16us; 14us; 67us; 26us; 66us; 30us; 11us; 31us; 15us; 32us; 12us; 33us; 10us; 34us; 9us; 0us; 16419us; 0us; 16420us; 2us; 16421us; 5us; 87us; 15us; 92us; 3us; 16424us; 5us; 87us; 12us; 91us; 15us; 92us; 2us; 16424us; 5us; 87us; 15us; 92us; 2us; 32768us; 11us; 90us; 31us; 83us; 0us; 16422us; 0us; 16422us; 2us; 32768us; 11us; 90us; 31us; 83us; 0us; 16423us; 2us; 32768us; 11us; 90us; 31us; 83us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 14us; 16us; 17us; 39us; 62us; 75us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 85us; 98us; 100us; 101us; 102us; 112us; 122us; 134us; 146us; 156us; 166us; 188us; 202us; 216us; 230us; 244us; 258us; 272us; 292us; 313us; 336us; 337us; 340us; 342us; 355us; 356us; 358us; 360us; 363us; 367us; 369us; 382us; 383us; 386us; 388us; 401us; 403us; 416us; 417us; 419us; 422us; 435us; 437us; 450us; 451us; 454us; 458us; 471us; 473us; 486us; 487us; 500us; 513us; 526us; 539us; 552us; 565us; 578us; 591us; 604us; 617us; 630us; 643us; 656us; 669us; 682us; 695us; 696us; 697us; 700us; 704us; 707us; 710us; 711us; 712us; 715us; 716us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 2us; 4us; 8us; 6us; 7us; 9us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 65535us; 65535us; 16395us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16419us; 16420us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 323 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 332 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                              _1 
                   )
# 47 "Parser.fsy"
                 :  TinyML.Ast.expr ));
# 343 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                   _1 
                   )
# 51 "Parser.fsy"
                 : 'expr));
# 354 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                   Tuple _2 
                   )
# 52 "Parser.fsy"
                 : 'expr));
# 365 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                               Lit (LInt _1) 
                   )
# 56 "Parser.fsy"
                 : 'expr_app_atom));
# 376 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                               Lit (LFloat _1) 
                   )
# 57 "Parser.fsy"
                 : 'expr_app_atom));
# 387 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                               Lit (LString _1) 
                   )
# 58 "Parser.fsy"
                 : 'expr_app_atom));
# 398 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                               Lit (LChar _1) 
                   )
# 59 "Parser.fsy"
                 : 'expr_app_atom));
# 409 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               Lit (LBool true) 
                   )
# 60 "Parser.fsy"
                 : 'expr_app_atom));
# 419 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                               Lit (LBool false) 
                   )
# 61 "Parser.fsy"
                 : 'expr_app_atom));
# 429 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                               Var _1 
                   )
# 63 "Parser.fsy"
                 : 'expr_app_atom));
# 440 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                               _2 
                   )
# 65 "Parser.fsy"
                 : 'expr_app_atom));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                       _1 
                   )
# 68 "Parser.fsy"
                 : 'expr_tuple_atom));
# 462 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                                       App (_1, _2) 
                   )
# 69 "Parser.fsy"
                 : 'expr_tuple_atom));
# 474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                       Lambda (_2, None, _4) 
                   )
# 71 "Parser.fsy"
                 : 'expr_tuple_atom));
# 486 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                       Lambda (_3, Some _5, _8) 
                   )
# 72 "Parser.fsy"
                 : 'expr_tuple_atom));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                                       Let (_2, _4, _6) 
                   )
# 74 "Parser.fsy"
                 : 'expr_tuple_atom));
# 512 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                                       LetRec (_3, None, _5, _7) 
                   )
# 75 "Parser.fsy"
                 : 'expr_tuple_atom));
# 525 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                                       LetRec (_3, Some _5, _7, _9) 
                   )
# 76 "Parser.fsy"
                 : 'expr_tuple_atom));
# 539 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                                 UnOp ("not", _2) 
                   )
# 78 "Parser.fsy"
                 : 'expr_tuple_atom));
# 550 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                                             UnOp ("-", _2) 
                   )
# 79 "Parser.fsy"
                 : 'expr_tuple_atom));
# 561 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                    BinOp (_1, "+", _3) 
                   )
# 81 "Parser.fsy"
                 : 'expr_tuple_atom));
# 573 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                     BinOp (_1, "-", _3) 
                   )
# 82 "Parser.fsy"
                 : 'expr_tuple_atom));
# 585 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                                    BinOp (_1, "*", _3) 
                   )
# 83 "Parser.fsy"
                 : 'expr_tuple_atom));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                                     BinOp (_1, "/", _3) 
                   )
# 84 "Parser.fsy"
                 : 'expr_tuple_atom));
# 609 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                                          BinOp (_1, "%", _3) 
                   )
# 85 "Parser.fsy"
                 : 'expr_tuple_atom));
# 621 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                   BinOp (_1, "=", _3) 
                   )
# 87 "Parser.fsy"
                 : 'expr_tuple_atom));
# 633 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                    BinOp (_1, "<>", _3) 
                   )
# 88 "Parser.fsy"
                 : 'expr_tuple_atom));
# 645 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                   BinOp (_1, "<", _3) 
                   )
# 89 "Parser.fsy"
                 : 'expr_tuple_atom));
# 657 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                                   BinOp (_1, ">", _3) 
                   )
# 90 "Parser.fsy"
                 : 'expr_tuple_atom));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                                    BinOp (_1, "<=", _3) 
                   )
# 91 "Parser.fsy"
                 : 'expr_tuple_atom));
# 681 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                    BinOp (_1, ">=", _3) 
                   )
# 92 "Parser.fsy"
                 : 'expr_tuple_atom));
# 693 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                                   BinOp (_1, "and", _3) 
                   )
# 93 "Parser.fsy"
                 : 'expr_tuple_atom));
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                         BinOp (_1, "or", _3) 
                   )
# 94 "Parser.fsy"
                 : 'expr_tuple_atom));
# 717 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                       [_1] 
                   )
# 98 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 728 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 99 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 740 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                               TyName _1 
                   )
# 103 "Parser.fsy"
                 : 'ty));
# 751 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                               TyArrow (_1, _3) 
                   )
# 104 "Parser.fsy"
                 : 'ty));
# 763 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                               TyTuple _1 
                   )
# 105 "Parser.fsy"
                 : 'ty));
# 774 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                               _2 
                   )
# 106 "Parser.fsy"
                 : 'ty));
# 785 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                               [_1] 
                   )
# 109 "Parser.fsy"
                 : 'ty_tuple));
# 796 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 110 "Parser.fsy"
                 : 'ty_tuple));
|]
# 809 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let program lexer lexbuf :  TinyML.Ast.expr  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
