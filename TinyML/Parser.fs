// Implementation file for parser generated by fsyacc
module TinyML.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open TinyML
open TinyML.Parsing.LexYacc
open TinyML.Ast

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))


# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | FUN
  | ARROW
  | LET
  | REC
  | IN
  | TRUE
  | FALSE
  | BRA
  | KET
  | SQBRA
  | SQKET
  | CURBRA
  | CURKET
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | BANG
  | QUESTION
  | PIPE
  | AMP
  | DOUBLEPIPE
  | DOUBLEAMP
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | COLON
  | SEMICOLON
  | COMMA
  | STRING of (System.String)
  | ID of (System.String)
  | CHAR of (System.Char)
  | FLOAT of (System.Double)
  | INT of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FUN
    | TOKEN_ARROW
    | TOKEN_LET
    | TOKEN_REC
    | TOKEN_IN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_SQBRA
    | TOKEN_SQKET
    | TOKEN_CURBRA
    | TOKEN_CURKET
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_PERCENT
    | TOKEN_BANG
    | TOKEN_QUESTION
    | TOKEN_PIPE
    | TOKEN_AMP
    | TOKEN_DOUBLEPIPE
    | TOKEN_DOUBLEAMP
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_CHAR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_expr_
    | NONTERM_expr_app_atom
    | NONTERM_expr_tuple_atom
    | NONTERM_expr_tuple_atoms
    | NONTERM_ty
    | NONTERM_ty_tuple

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IF  -> 1 
  | THEN  -> 2 
  | ELSE  -> 3 
  | FUN  -> 4 
  | ARROW  -> 5 
  | LET  -> 6 
  | REC  -> 7 
  | IN  -> 8 
  | TRUE  -> 9 
  | FALSE  -> 10 
  | BRA  -> 11 
  | KET  -> 12 
  | SQBRA  -> 13 
  | SQKET  -> 14 
  | CURBRA  -> 15 
  | CURKET  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | STAR  -> 19 
  | SLASH  -> 20 
  | PERCENT  -> 21 
  | BANG  -> 22 
  | QUESTION  -> 23 
  | PIPE  -> 24 
  | AMP  -> 25 
  | DOUBLEPIPE  -> 26 
  | DOUBLEAMP  -> 27 
  | LT  -> 28 
  | GT  -> 29 
  | LEQ  -> 30 
  | GEQ  -> 31 
  | EQ  -> 32 
  | NEQ  -> 33 
  | COLON  -> 34 
  | SEMICOLON  -> 35 
  | COMMA  -> 36 
  | STRING _ -> 37 
  | ID _ -> 38 
  | CHAR _ -> 39 
  | FLOAT _ -> 40 
  | INT _ -> 41 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_THEN 
  | 3 -> TOKEN_ELSE 
  | 4 -> TOKEN_FUN 
  | 5 -> TOKEN_ARROW 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_REC 
  | 8 -> TOKEN_IN 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_BRA 
  | 12 -> TOKEN_KET 
  | 13 -> TOKEN_SQBRA 
  | 14 -> TOKEN_SQKET 
  | 15 -> TOKEN_CURBRA 
  | 16 -> TOKEN_CURKET 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_STAR 
  | 20 -> TOKEN_SLASH 
  | 21 -> TOKEN_PERCENT 
  | 22 -> TOKEN_BANG 
  | 23 -> TOKEN_QUESTION 
  | 24 -> TOKEN_PIPE 
  | 25 -> TOKEN_AMP 
  | 26 -> TOKEN_DOUBLEPIPE 
  | 27 -> TOKEN_DOUBLEAMP 
  | 28 -> TOKEN_LT 
  | 29 -> TOKEN_GT 
  | 30 -> TOKEN_LEQ 
  | 31 -> TOKEN_GEQ 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_NEQ 
  | 34 -> TOKEN_COLON 
  | 35 -> TOKEN_SEMICOLON 
  | 36 -> TOKEN_COMMA 
  | 37 -> TOKEN_STRING 
  | 38 -> TOKEN_ID 
  | 39 -> TOKEN_CHAR 
  | 40 -> TOKEN_FLOAT 
  | 41 -> TOKEN_INT 
  | 44 -> TOKEN_end_of_input
  | 42 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexpr 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_expr_ 
    | 3 -> NONTERM_expr_ 
    | 4 -> NONTERM_expr_app_atom 
    | 5 -> NONTERM_expr_app_atom 
    | 6 -> NONTERM_expr_app_atom 
    | 7 -> NONTERM_expr_app_atom 
    | 8 -> NONTERM_expr_app_atom 
    | 9 -> NONTERM_expr_app_atom 
    | 10 -> NONTERM_expr_app_atom 
    | 11 -> NONTERM_expr_app_atom 
    | 12 -> NONTERM_expr_tuple_atom 
    | 13 -> NONTERM_expr_tuple_atom 
    | 14 -> NONTERM_expr_tuple_atom 
    | 15 -> NONTERM_expr_tuple_atom 
    | 16 -> NONTERM_expr_tuple_atom 
    | 17 -> NONTERM_expr_tuple_atom 
    | 18 -> NONTERM_expr_tuple_atom 
    | 19 -> NONTERM_expr_tuple_atom 
    | 20 -> NONTERM_expr_tuple_atom 
    | 21 -> NONTERM_expr_tuple_atom 
    | 22 -> NONTERM_expr_tuple_atom 
    | 23 -> NONTERM_expr_tuple_atom 
    | 24 -> NONTERM_expr_tuple_atom 
    | 25 -> NONTERM_expr_tuple_atom 
    | 26 -> NONTERM_expr_tuple_atom 
    | 27 -> NONTERM_expr_tuple_atom 
    | 28 -> NONTERM_expr_tuple_atom 
    | 29 -> NONTERM_expr_tuple_atom 
    | 30 -> NONTERM_expr_tuple_atom 
    | 31 -> NONTERM_expr_tuple_atom 
    | 32 -> NONTERM_expr_tuple_atom 
    | 33 -> NONTERM_expr_tuple_atoms 
    | 34 -> NONTERM_expr_tuple_atoms 
    | 35 -> NONTERM_ty 
    | 36 -> NONTERM_ty 
    | 37 -> NONTERM_ty 
    | 38 -> NONTERM_ty 
    | 39 -> NONTERM_ty_tuple 
    | 40 -> NONTERM_ty_tuple 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 44 
let _fsyacc_tagOfErrorTerminal = 42

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FUN  -> "FUN" 
  | ARROW  -> "ARROW" 
  | LET  -> "LET" 
  | REC  -> "REC" 
  | IN  -> "IN" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | SQBRA  -> "SQBRA" 
  | SQKET  -> "SQKET" 
  | CURBRA  -> "CURBRA" 
  | CURKET  -> "CURKET" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | PERCENT  -> "PERCENT" 
  | BANG  -> "BANG" 
  | QUESTION  -> "QUESTION" 
  | PIPE  -> "PIPE" 
  | AMP  -> "AMP" 
  | DOUBLEPIPE  -> "DOUBLEPIPE" 
  | DOUBLEAMP  -> "DOUBLEAMP" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | CHAR _ -> "CHAR" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | SQBRA  -> (null : System.Object) 
  | SQKET  -> (null : System.Object) 
  | CURBRA  -> (null : System.Object) 
  | CURKET  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | DOUBLEPIPE  -> (null : System.Object) 
  | DOUBLEAMP  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 27us; 65535us; 0us; 1us; 6us; 17us; 16us; 17us; 45us; 21us; 46us; 22us; 47us; 23us; 48us; 24us; 49us; 25us; 50us; 26us; 51us; 27us; 52us; 28us; 53us; 29us; 54us; 30us; 55us; 32us; 56us; 33us; 57us; 34us; 60us; 35us; 66us; 36us; 69us; 37us; 70us; 38us; 73us; 39us; 74us; 40us; 77us; 41us; 78us; 42us; 81us; 43us; 82us; 44us; 83us; 31us; 27us; 65535us; 0us; 2us; 6us; 2us; 16us; 2us; 45us; 2us; 46us; 2us; 47us; 2us; 48us; 2us; 49us; 2us; 50us; 2us; 51us; 2us; 52us; 2us; 53us; 2us; 54us; 2us; 55us; 2us; 56us; 2us; 57us; 2us; 60us; 2us; 66us; 2us; 69us; 2us; 70us; 2us; 73us; 2us; 74us; 2us; 77us; 2us; 78us; 2us; 81us; 2us; 82us; 2us; 83us; 2us; 29us; 65535us; 0us; 19us; 4us; 20us; 5us; 20us; 6us; 19us; 16us; 19us; 45us; 19us; 46us; 19us; 47us; 19us; 48us; 19us; 49us; 19us; 50us; 19us; 51us; 19us; 52us; 19us; 53us; 19us; 54us; 19us; 55us; 19us; 56us; 19us; 57us; 19us; 60us; 19us; 66us; 19us; 69us; 19us; 70us; 19us; 73us; 19us; 74us; 19us; 77us; 19us; 78us; 19us; 81us; 19us; 82us; 19us; 83us; 19us; 27us; 65535us; 0us; 4us; 6us; 5us; 16us; 4us; 45us; 4us; 46us; 4us; 47us; 4us; 48us; 4us; 49us; 4us; 50us; 4us; 51us; 4us; 52us; 4us; 53us; 4us; 54us; 4us; 55us; 4us; 56us; 4us; 57us; 4us; 60us; 4us; 66us; 4us; 69us; 4us; 70us; 4us; 73us; 4us; 74us; 4us; 77us; 4us; 78us; 4us; 81us; 4us; 82us; 4us; 83us; 5us; 2us; 65535us; 6us; 7us; 83us; 84us; 6us; 65535us; 63us; 64us; 71us; 72us; 79us; 80us; 89us; 86us; 92us; 87us; 94us; 88us; 6us; 65535us; 63us; 90us; 71us; 90us; 79us; 90us; 89us; 90us; 92us; 90us; 94us; 91us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 29us; 57us; 87us; 115us; 118us; 125us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 12us; 0us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 1us; 1us; 1us; 1us; 2us; 2us; 13us; 4us; 2us; 13us; 33us; 34us; 2us; 3us; 11us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 12us; 11us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 1us; 11us; 1us; 12us; 1us; 13us; 12us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 11us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 26us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 28us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 29us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 29us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 30us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 30us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 31us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 31us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 32us; 12us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 32us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 2us; 27us; 28us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 4us; 28us; 36us; 39us; 40us; 1us; 28us; 1us; 28us; 4us; 29us; 30us; 31us; 32us; 2us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 30us; 4us; 30us; 36us; 39us; 40us; 1us; 30us; 1us; 30us; 2us; 31us; 32us; 2us; 31us; 32us; 1us; 31us; 1us; 31us; 1us; 32us; 4us; 32us; 36us; 39us; 40us; 1us; 32us; 1us; 32us; 1us; 34us; 1us; 34us; 1us; 35us; 4us; 36us; 36us; 39us; 40us; 4us; 36us; 38us; 39us; 40us; 3us; 36us; 39us; 40us; 1us; 36us; 1us; 37us; 2us; 37us; 40us; 1us; 38us; 1us; 38us; 1us; 40us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 15us; 17us; 19us; 22us; 27us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 63us; 65us; 67us; 69us; 82us; 95us; 108us; 121us; 134us; 147us; 160us; 173us; 186us; 199us; 211us; 224us; 237us; 250us; 263us; 276us; 289us; 302us; 315us; 328us; 341us; 354us; 367us; 380us; 382us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 409us; 411us; 413us; 415us; 417us; 419us; 424us; 426us; 428us; 433us; 436us; 438us; 440us; 442us; 447us; 449us; 451us; 454us; 457us; 459us; 461us; 463us; 468us; 470us; 472us; 474us; 476us; 478us; 483us; 488us; 492us; 494us; 496us; 499us; 501us; 503us; |]
let _fsyacc_action_rows = 95
let _fsyacc_actionTableElements = [|12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 11us; 49152us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 1us; 32768us; 0us; 3us; 0us; 16385us; 8us; 16386us; 9us; 13us; 10us; 14us; 11us; 16us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 10us; 16386us; 9us; 13us; 10us; 14us; 11us; 16us; 12us; 16417us; 36us; 83us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 1us; 32768us; 12us; 8us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 12us; 18us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 11us; 16398us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16399us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16400us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16401us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16402us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16403us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16404us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16405us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16406us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16407us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 32768us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16408us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16409us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16410us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16411us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16412us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 12us; 32768us; 8us; 70us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16413us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 12us; 32768us; 8us; 74us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16414us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 12us; 32768us; 8us; 78us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16415us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 12us; 32768us; 8us; 82us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 11us; 16416us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 48us; 21us; 49us; 28us; 52us; 29us; 53us; 30us; 54us; 31us; 55us; 32us; 50us; 33us; 51us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 2us; 32768us; 11us; 61us; 38us; 59us; 1us; 32768us; 5us; 60us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 1us; 32768us; 38us; 62us; 1us; 32768us; 34us; 63us; 2us; 32768us; 11us; 92us; 38us; 85us; 3us; 16423us; 5us; 89us; 12us; 65us; 19us; 94us; 1us; 32768us; 5us; 66us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 2us; 32768us; 7us; 75us; 38us; 68us; 2us; 32768us; 32us; 69us; 34us; 71us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 2us; 32768us; 11us; 92us; 38us; 85us; 3us; 16423us; 5us; 89us; 19us; 94us; 32us; 73us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 1us; 32768us; 38us; 76us; 2us; 32768us; 32us; 77us; 34us; 79us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 2us; 32768us; 11us; 92us; 38us; 85us; 3us; 16423us; 5us; 89us; 19us; 94us; 32us; 81us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 12us; 32768us; 4us; 58us; 6us; 67us; 9us; 13us; 10us; 14us; 11us; 6us; 18us; 56us; 22us; 57us; 37us; 11us; 38us; 15us; 39us; 12us; 40us; 10us; 41us; 9us; 0us; 16418us; 0us; 16419us; 2us; 16420us; 5us; 89us; 19us; 94us; 3us; 16423us; 5us; 89us; 12us; 93us; 19us; 94us; 2us; 16423us; 5us; 89us; 19us; 94us; 2us; 32768us; 11us; 92us; 38us; 85us; 0us; 16421us; 0us; 16421us; 2us; 32768us; 11us; 92us; 38us; 85us; 0us; 16422us; 2us; 32768us; 11us; 92us; 38us; 85us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 25us; 27us; 28us; 37us; 48us; 61us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 84us; 97us; 98us; 99us; 100us; 112us; 124us; 136us; 148us; 160us; 172us; 184us; 196us; 208us; 220us; 232us; 244us; 256us; 268us; 280us; 292us; 305us; 317us; 330us; 342us; 355us; 367us; 380us; 392us; 405us; 418us; 431us; 444us; 457us; 470us; 483us; 496us; 509us; 522us; 535us; 548us; 561us; 564us; 566us; 579us; 581us; 583us; 586us; 590us; 592us; 605us; 608us; 611us; 624us; 637us; 640us; 644us; 657us; 670us; 672us; 675us; 688us; 701us; 704us; 708us; 721us; 734us; 747us; 748us; 749us; 752us; 756us; 759us; 762us; 763us; 764us; 767us; 768us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 4us; 8us; 6us; 8us; 7us; 9us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 65535us; 65535us; 16395us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 16419us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startexpr));
# 373 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                               _1 
                   )
# 47 "Parser.fsy"
                 :  TinyML.Ast.expr ));
# 384 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                   _1 
                   )
# 51 "Parser.fsy"
                 : 'expr_));
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                   Tuple _2 
                   )
# 52 "Parser.fsy"
                 : 'expr_));
# 406 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                               Lit (LInt _1) 
                   )
# 56 "Parser.fsy"
                 : 'expr_app_atom));
# 417 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                               Lit (LFloat _1) 
                   )
# 57 "Parser.fsy"
                 : 'expr_app_atom));
# 428 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                               Lit (LString _1) 
                   )
# 58 "Parser.fsy"
                 : 'expr_app_atom));
# 439 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                               Lit (LChar _1) 
                   )
# 59 "Parser.fsy"
                 : 'expr_app_atom));
# 450 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               Lit (LBool true) 
                   )
# 60 "Parser.fsy"
                 : 'expr_app_atom));
# 460 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                               Lit (LBool false) 
                   )
# 61 "Parser.fsy"
                 : 'expr_app_atom));
# 470 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                               Var _1 
                   )
# 63 "Parser.fsy"
                 : 'expr_app_atom));
# 481 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                               _2 
                   )
# 65 "Parser.fsy"
                 : 'expr_app_atom));
# 492 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                   _1 
                   )
# 68 "Parser.fsy"
                 : 'expr_tuple_atom));
# 503 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                                   App (_1, _2) 
                   )
# 69 "Parser.fsy"
                 : 'expr_tuple_atom));
# 515 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                   Plus (_1, _3) 
                   )
# 71 "Parser.fsy"
                 : 'expr_tuple_atom));
# 527 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                   Minus (_1, _3) 
                   )
# 72 "Parser.fsy"
                 : 'expr_tuple_atom));
# 539 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                                   Times (_1, _3) 
                   )
# 73 "Parser.fsy"
                 : 'expr_tuple_atom));
# 551 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                                   Div (_1, _3) 
                   )
# 74 "Parser.fsy"
                 : 'expr_tuple_atom));
# 563 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                                   Mod (_1, _3) 
                   )
# 75 "Parser.fsy"
                 : 'expr_tuple_atom));
# 575 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                               Eq (_1, _3) 
                   )
# 77 "Parser.fsy"
                 : 'expr_tuple_atom));
# 587 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                               Neq (_1, _3) 
                   )
# 78 "Parser.fsy"
                 : 'expr_tuple_atom));
# 599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                               Lt (_1, _3) 
                   )
# 79 "Parser.fsy"
                 : 'expr_tuple_atom));
# 611 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                               Gt (_1, _3) 
                   )
# 80 "Parser.fsy"
                 : 'expr_tuple_atom));
# 623 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                               Leq (_1, _3) 
                   )
# 81 "Parser.fsy"
                 : 'expr_tuple_atom));
# 635 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                               Geq (_1, _3) 
                   )
# 82 "Parser.fsy"
                 : 'expr_tuple_atom));
# 647 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                               UMinus _2 
                   )
# 84 "Parser.fsy"
                 : 'expr_tuple_atom));
# 658 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                               Not _2 
                   )
# 85 "Parser.fsy"
                 : 'expr_tuple_atom));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                   Lambda (_2, None, _4) 
                   )
# 87 "Parser.fsy"
                 : 'expr_tuple_atom));
# 681 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                   Lambda (_3, Some _5, _8) 
                   )
# 88 "Parser.fsy"
                 : 'expr_tuple_atom));
# 694 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                                       Let (_2, None, _4, _6) 
                   )
# 90 "Parser.fsy"
                 : 'expr_tuple_atom));
# 707 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                                       Let (_2, Some _4, _6, _8) 
                   )
# 91 "Parser.fsy"
                 : 'expr_tuple_atom));
# 721 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                       LetRec (_3, None, _5, _7) 
                   )
# 92 "Parser.fsy"
                 : 'expr_tuple_atom));
# 734 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                       LetRec (_3, Some _5, _7, _9) 
                   )
# 93 "Parser.fsy"
                 : 'expr_tuple_atom));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                       [_1] 
                   )
# 96 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 97 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 771 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                               TyName _1 
                   )
# 102 "Parser.fsy"
                 : 'ty));
# 782 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                               TyArrow (_1, _3) 
                   )
# 103 "Parser.fsy"
                 : 'ty));
# 794 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                               TyTuple _1 
                   )
# 104 "Parser.fsy"
                 : 'ty));
# 805 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                               _2 
                   )
# 105 "Parser.fsy"
                 : 'ty));
# 816 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                               [_1] 
                   )
# 108 "Parser.fsy"
                 : 'ty_tuple));
# 827 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 109 "Parser.fsy"
                 : 'ty_tuple));
|]
# 840 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 45;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let expr lexer lexbuf :  TinyML.Ast.expr  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
